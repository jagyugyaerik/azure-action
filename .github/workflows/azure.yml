name:  Provision Application Landing Zone
# Controls when the action will run. Triggers the workflow on push or pull request
on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'Name of project space tfvars file'
        required: true
        default: 'example_app'
jobs:
  # This workflow contains the following jobs
  terraform-apply:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      TF_CLI_ARGS: '-no-color'
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - run: echo ${{ github.event.inputs.environment_name }}
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        # Update backend-config to match remote storage location (except tfstate file name, which is dynamically created)
        run: |
          terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
      - name: Retrieve resource group name
        id: resource_group
        run: echo '::set-output name=RESOURCE_GROUP_NAME::$(terraform output project_space_name)'
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
      - name: Run Azure PowerShell script
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $resources = @()
            $rgName = ${{ steps.resource_group.outputs.RESOURCE_GROUP_NAME }}

            Write-Host($rgName)

            $resources += Get-AzResource -ResourceGroupName $rgName

            foreach ($resource in $resources) {
                try {
                    $resource | % {$_.Tags.Remove("Module")} -ErrorAction SilentlyContinue
                    $resource | Set-AzResource -Force -ErrorAction SilentlyContinue
                } catch {
                    write-host ("Could not remove tag because it either doesn't exist or some other reason unknown")
                }
                Write-Host("Removed Tag from Resource: " + $resource.Name)
            }
  # destroy:
  #   name: destroy
  #   runs-on: ubuntu-latest
  #   if: ${{ failure() || cancelled() }}
  #   needs: terraform-apply
  #   steps:
  #     - name: Checkout Source Code
  #       uses: actions/checkout@v2
  #     - name: Install Terraform
  #       uses: hashicorp/setup-terraform@v1
  #     - name: Terraform destroy
  #       run: terraform destroy -auto-approve -var-file="fixtures.tfvars"
